#!/bin/sh
# Copyright Â© 2009-15 Jonathan Rascher.
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#
# This is an attempt at porting Alan Pinstein's and Ryan Bates's dotfile
# installation utility [1] from a Ruby Rakefile to a POSIX shell script. Usage
# is pretty simple. Symbolic links to any normal files in this directory that
# don't have a ".local" extension will be created in the current user's home
# directory. Additionally, any file that does have a ".local" extension will be
# copied to (not linked in) the current user's home directory, provided that
# there is not an existing file with the same name in the home directory.  The
# idea is that ".local" files will be used to store per-host settings and things
# that should not be placed into version control (e.g., for privacy reasons),
# while non-".local" files will store universal, public settings.  Finally, all
# new symbolic links or copied files will be created with a dot prefixed to
# their names, e.g., a file named `foobar` will be installed with the name
# `~/.foobar`.
#
# Additionally, dotfiles in arbitrary subdirectories are now supported. The
# rules regarding local and nonlocal files also apply to files in
# subdirectories. The dot prefixing behavior described above is usually applied
# to files in subdirectories as well; however, if the highest subdirectory in a
# file's path is named `bin`, `fortunes`, or `texmf`, then no prefix is applied.
# Therefore, a file named `cows/ducks` will be installed with the name
# `~/.cows/ducks`, whereas a file named `bin/prog` will be installed as
# `~/bin/prog`.
#
# Links:
# 1. Pinstein's original Rakefile is here <http://bit.ly/7WITQW>.

# XXX: Do not change this to a newer $(...) style command substitution; that
# inexplicably breaks old versions of bash 3.
script=`cat <<'EOT'

dont_replace () {
  what=$1
  file=$2

  printf '%s\n' "$what $file already exists. Replace? [y/N]"
  read answer

  if [ x"$answer" = xy ] || [ x"$answer" = xY ]; then
    rm -rf "$file"
    false
  else
    true
  fi
}

handle_dir () {
  dest=$1

  if [ -d "$dest" ]; then
    [ x"$verbose" = x1 ] \
        && printf '%s\n' "Directory $dest already exists; skipping"
    return
  fi

  [ -e "$dest" ] && dont_replace Directory "$dest" && return

  printf '%s\n' "Creating directory $dest."
  mkdir "$dest"
}

handle_file () {
  dest=$1
  src=$2

  ext=$(printf %s "$src" | sed -e 's/.*\.\(.*\)/\1/' -e t -e d)

  if [ x"$ext" = xlocal ]; then
    dest=$(printf %s "$dest" | cut -b -$(( ${#dest} - ${#ext} - 1 )))
  else
    if [ "$(readlink "$dest")" = "$src" ]; then
      [ x"$verbose" = x1 ] \
          && printf '%s\n' "Symbolic link $dest already exists; skipping"
      return
    fi
  fi

  [ -e "$dest" ] && dont_replace File "$dest" && return

  if [ x"$ext" = xlocal ]; then
    printf '%s\n' "Copying file $src to $dest"
    cp "$src" "$dest"
    chmod g-rwx,o-rwx "$dest"
  else
    printf '%s\n' "Symbolically linking $dest to $src"
    ln -s "$src" "$dest"
  fi
}

lbrace={
rbrace=}

check_symlinks=
verbose=

while getopts cv opt; do
  case $opt in
  c) check_symlinks=1;;
  v) verbose=1;;
  \?) exit 1;;
  esac
done

shift $(expr $OPTIND - 1)

for src; do
  src=$(printf %s "$src" | sed 's:^\./::')

  if printf %s "$src" | grep -E '^(bin|fortunes|texmf)($|/)' >/dev/null; then
    dest=~/$src
  else
    dest=~/.$src
  fi

  if [ -d "$src" ]; then
    handle_dir "$dest"
  elif [ -r "$src" ]; then
    handle_file "$dest" "$PWD/$src"
  fi
done

if [ x"$check_symlinks" = x1 ]; then
  broken_symlink_script=$(cat <<'EOU'
for symlink; do
  printf '%s\n' "Broken symbolic link (deleted dotfile?) $symlink"
done
EOU
)
  find -L ~ -type l \
       -exec sh -c "$broken_symlink_script" "$0" "$lbrace$rbrace" +
fi

EOT
`

find . \! \( -path . -o -path ./README -o -path ./install \) -a \
     \! \( -name '.git*' -prune -o -exec sh -c "$script" "$0" "$@" {} + \)
